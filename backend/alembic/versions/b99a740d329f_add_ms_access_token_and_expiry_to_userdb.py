"""Add ms_access_token and expiry to UserDB

Revision ID: b99a740d329f
Revises: 5ada9ead051f
Create Date: 2025-04-12 21:06:41.005429

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b99a740d329f'
down_revision: Union[str, None] = '5ada9ead051f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_audit_logs_created_at', table_name='audit_logs')
    op.drop_index('ix_audit_logs_token_id', table_name='audit_logs')
    op.drop_table('audit_logs')
    op.alter_column('api_keys', 'encrypted_key',
               existing_type=sa.VARCHAR(length=1024),
               type_=sa.Text(),
               existing_nullable=False)
    op.drop_index('ix_api_keys_id', table_name='api_keys')
    op.drop_index('ix_api_keys_provider', table_name='api_keys')
    op.drop_index('ix_api_keys_user_email', table_name='api_keys')
    op.drop_constraint('api_keys_user_email_fkey', 'api_keys', type_='foreignkey')
    op.create_foreign_key(None, 'api_keys', 'users', ['user_email'], ['email'], ondelete='CASCADE')
    op.add_column('users', sa.Column('ms_access_token', sa.String(), nullable=True))
    op.add_column('users', sa.Column('ms_token_expiry', sa.DateTime(timezone=True), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('users', 'ms_token_expiry')
    op.drop_column('users', 'ms_access_token')
    op.drop_constraint(None, 'api_keys', type_='foreignkey')
    op.create_foreign_key('api_keys_user_email_fkey', 'api_keys', 'users', ['user_email'], ['email'])
    op.create_index('ix_api_keys_user_email', 'api_keys', ['user_email'], unique=False)
    op.create_index('ix_api_keys_provider', 'api_keys', ['provider'], unique=False)
    op.create_index('ix_api_keys_id', 'api_keys', ['id'], unique=False)
    op.alter_column('api_keys', 'encrypted_key',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=1024),
               existing_nullable=False)
    op.create_table('audit_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('token_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('collection_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('query_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('filter_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('result_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('response_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('execution_time_ms', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['token_id'], ['tokens.id'], name='audit_logs_token_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='audit_logs_pkey')
    )
    op.create_index('ix_audit_logs_token_id', 'audit_logs', ['token_id'], unique=False)
    op.create_index('ix_audit_logs_created_at', 'audit_logs', ['created_at'], unique=False)
    # ### end Alembic commands ###
