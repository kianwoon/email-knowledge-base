[supervisord]
nodaemon=true
logfile=/app/logs/supervisor/supervisord.log
logfile_maxbytes=50MB
logfile_backups=10
loglevel=info
pidfile=/tmp/supervisord.pid
user=celery

# TEMP: Worker section Re-enabled to test resource usage
[program:celery-worker]
command=celery -A app.celery_app worker -l info --pool=threads -n worker.%%h
directory=/app
autostart=true
autorestart=true
startsecs=10
stopwaitsecs=600
killasgroup=true
priority=998
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
user=celery
environment=PYTHONUNBUFFERED=1,CELERY_BROKER_URL="redis://redis-queue.email-knowledge-base-2.internal:6379/0",CELERY_RESULT_BACKEND="redis://redis-queue.email-knowledge-base-2.internal:6379/0"

[program:celery-beat]
command=celery -A app.celery_app beat -l info
directory=/app
autostart=true
autorestart=true
startsecs=10
stopwaitsecs=600
killasgroup=true
priority=999
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
user=celery
environment=PYTHONUNBUFFERED=1,CELERY_BROKER_URL="redis://redis-queue.email-knowledge-base-2.internal:6379/0",CELERY_RESULT_BACKEND="redis://redis-queue.email-knowledge-base-2.internal:6379/0"

# Optional Healthcheck Responder (if Koyeb needs an HTTP healthcheck for the supervisord container)
# This replaces the nc command previously in the Dockerfile ENTRYPOINT.
# Ensure HEALTH_PORT is set as an environment variable for your Koyeb service if you use this.
# [program:healthcheck]
# command=bash -c 'while true; do echo -e "HTTP/1.1 200 OK\r\nContent-Length: 0\r\n\r\n" | nc -l -p "${HEALTH_PORT:-8080}"; done'
# directory=/app
# autostart=true
# autorestart=true
# user=celery
# stdout_logfile=/dev/stdout
# stdout_logfile_maxbytes=0
# stderr_logfile=/dev/stderr
# stderr_logfile_maxbytes=0 